{ pkgs ? import <nixpkgs> { }
, checks ? import ./checks.nix { inherit pkgs; }
, libyang
}:
let
  project = import ./project.nix;
  checkHook = checks.pre-commit-check.shellHook;
  defaultOut = to: file: ext: "${to}${file}.${ext}";
  toFile = { ext, comment ? f: "", to ? "./", out ? defaultOut }: file: rec {
    inherit ext file to comment;
    content = builtins.toFile "${file}.${ext}" ''${comment file}${import (./. + "/${file}.nix")}'';
    hook = ''
      mkdir -p ${to}
      cp --no-preserve all ${content} ${out to file ext}
      git add -f ${out to file ext}
    '';
  };
  mdComment = f: "<!-- generated by ${f}.nix -->\n";
  updateReadme = toFile { ext = "md"; comment = mdComment; } "README";
  nimbleOut = to: file: ext: "${to}${project.slug}.${ext}";
  updateNimble = toFile { ext = "nimble"; out = nimbleOut; } "nimble";
  gh-actions = toFile { ext = "yaml"; to = "./.github/workflows/"; } "gh-actions";
in
pkgs.mkShell {
  buildInputs = with pkgs;[ nim-unwrapped nimble-unwrapped libyang ];
  shellHook = ''
    ${checkHook}
    ${updateReadme.hook}
    ${updateNimble.hook}
    ${gh-actions.hook}
  '';
}
